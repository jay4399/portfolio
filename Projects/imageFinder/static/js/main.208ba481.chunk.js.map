{"version":3,"sources":["components/ImageCard.js","components/ImageSearch.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","image","tags","split","className","src","webformatURL","alt","user","views","downloads","likes","map","tag","index","key","ImageSearch","searchText","useState","text","setText","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","res","json","data","hits","catch","err","console","log","length","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sKAwCeA,EAtCG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEXC,EAAOD,EAAMC,KAAKC,MAAM,KAE9B,OACI,yBAAKC,UAAU,8CACjB,yBAAKC,IAAMJ,EAAMK,aAAeC,IAAI,GAAGH,UAAU,WACjD,yBAAKA,UAAU,aACb,yBAAKA,UAAU,sKAAf,MAEK,gCAAUH,EAAMO,OAErB,wBAAIJ,UAAU,aACZ,4BACE,2CACEH,EAAMQ,OAEV,4BACE,+CACER,EAAMS,WAEV,4BACE,2CACET,EAAMU,SAId,yBAAKP,UAAU,aACXF,EAAKU,KAAI,SAACC,EAAKC,GAAN,OACP,0BAAMC,IAAMD,EAAQV,UAAU,mMAA9B,IACGS,SCHAG,EA3BK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,KAOpC,OACI,yBAAKhB,UAAU,kDACX,0BAAMiB,SAPG,SAACC,GACdA,EAAEC,iBACFN,EAAWE,IAKqBf,UAAU,mBAClC,yBAAKA,UAAU,8DACX,2BACAoB,SAAU,SAAAF,GAAC,OAAIF,EAAQE,EAAEG,OAAOC,QAChCtB,UAAU,kHACVuB,KAAK,OACLC,YAAY,kBACZ,4BACAxB,UAAU,kIACVuB,KAAK,UAFL,cCqBLE,MAnCf,WAAgB,IAAD,EAEeX,mBAAS,IAFxB,mBAENY,EAFM,KAEEC,EAFF,OAGqBb,oBAAS,GAH9B,mBAGNc,EAHM,KAGKC,EAHL,OAIWf,mBAAS,IAJpB,mBAINgB,EAJM,KAIAC,EAJA,KAgBb,OAVAC,qBAAW,WACTC,MAAM,gCAAD,OAAiCC,qCAAjC,cAA4EJ,EAA5E,sBACJK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAUW,EAAKC,MACfV,GAAa,MAEdW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,CAACX,IAGF,yBAAK9B,UAAU,qBACb,wBAAIA,UAAU,kLAAd,6BAGA,kBAAC,EAAD,CAAaa,WAAY,SAACE,GAAD,OAAUgB,EAAQhB,OAEzCa,GAA+B,IAAlBF,EAAOkB,QAAgB,wBAAI5C,UAAU,sCAAd,8CAErC4B,EAAY,wBAAI5B,UAAU,sCAAd,cACb,yBAAKA,UAAU,yCACX0B,EAAOlB,KAAI,SAAAX,GAAK,OAChB,kBAAC,EAAD,CAAWc,IAAMd,EAAMgD,GAAKhD,MAAQA,UCpB1BiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.208ba481.chunk.js","sourcesContent":["import React from 'react'\n\nconst ImageCard = ({ image }) => {\n\n    const tags = image.tags.split(',')\n\n    return (\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\n      <img src={ image.webformatURL } alt=\"\" className=\"w-full\" />\n      <div className=\"px-6 py-4\">\n        <div className=\"font-bold text-teal-500 text-xl mb-8 text-center \n        transition duration-500 ease-in-out hover:text-2xl transform hover:-translate-y-1 hover:scale-110 cursor-default\">\n          By <strong>{ image.user }</strong>\n        </div>\n        <ul className=\"space-y-3\">\n          <li>\n            <strong>Views: </strong>\n            { image.views }\n          </li>\n          <li>\n            <strong>Downloads: </strong>\n            { image.downloads }\n          </li>\n          <li>\n            <strong>Likes: </strong>\n            { image.likes }\n          </li>\n        </ul>\n      </div>\n      <div className=\"px-6 py-4\">\n        { tags.map((tag, index) => (\n            <span key={ index } className=\"inline-block bg-gray-100 rounded-full px-3 py-1 my-1 text-sm font-semibold text-teal-500 mr-2 transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110 cursor-default\">\n            #{ tag }\n          </span>\n        ))}\n      </div>\n    </div>\n    )\n}\n\nexport default ImageCard\n","import React, { useState } from 'react'\n\nconst ImageSearch = ({ searchText }) => {\n    const [text, setText] = useState('')\n    const onSubmit = (e) => {\n        e.preventDefault()\n        searchText(text)\n    }\n\n    return (\n        <div className=\"max-w-sm rounded overflow-hidden my-10 mx-auto\">\n            <form onSubmit={ onSubmit } className=\"w-full max-w-sm\">\n                <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\n                    <input \n                    onChange={e => setText(e.target.value)} \n                    className=\"appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n                    type=\"text\"\n                    placeholder=\"Find Image...\" />\n                    <button \n                    className=\"flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded\"\n                    type=\"submit\" >\n                        Search\n                    </button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default ImageSearch\n","import React, { useState, useEffect } from 'react';\nimport ImageCard from './components/ImageCard'\nimport ImageSearch from './components/ImageSearch'\n\nfunction App() {\n\n  const [images, setImages] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [term, setTerm] = useState('')\n\n  useEffect (() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo`)\n    .then(res => res.json ())\n    .then(data => {\n      setImages(data.hits)\n      setIsLoading(false)\n    })\n    .catch(err => console.log(err))\n  }, [term])\n\n  return (\n    <div className=\"container mx-auto\">\n      <h1 className=\"text-5xl text-center mx-auto w-full font-black text-teal-500 \n      transition duration-500 ease-in-out hover:text-6xl transform hover:-translate-y-1 hover:scale-110 cursor-default\">Image Search from Pixabay</h1>\n\n      <ImageSearch searchText={(text) => setTerm(text)}/>\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-5xl text-center mx-auto mt-32\">No Images Found. Please Try Another Search</h1>}\n\n      {isLoading ? <h1 className=\"text-6xl text-center mx-auto mt-32\">Loading...</h1> : \n      <div className=\"grid grid-cols-1 gap-5 md:grid-cols-3\">\n        { images.map(image => (\n          <ImageCard key={ image.id } image={ image } />\n        ))}\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}